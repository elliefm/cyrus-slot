#!/usr/bin/env perl

use warnings;
use strict;

use Cwd;
use Data::Dumper;
use File::Find;
use File::Path;
use IPC::System::Simple qw(run);
use POSIX ();

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Slot;
use Slot::Command;

sub usage;
sub become_cyrus;

my %CMD_REFS = (
    'init' => \&cmd_init,
    'force-init' => \&cmd_init,

    'configure' => \&cmd_configure,
    'build' => \&cmd_build,
    'check' => \&cmd_check,
    'install' => \&cmd_install,

    'fullbuild' => \&cmd_fullbuild,

    'start' => \&Slot::Command::start,
    'stop' => \&cmd_stop,
);

my @saved_argv = @ARGV;

# parse arguments
my ($slot, $command) = @ARGV;
exit usage if not $slot or not $command;

# slot might validly not exist yet, so don't try to validate it too deeply

# validate command
if (not exists $CMD_REFS{$command}) {
    print STDERR "error: unrecognised command: $command\n";
    exit usage;
}

# become cyrus user
become_cyrus($0, @saved_argv);

# check that slot basedir exists and is valid
my $slot_basedir = Slot::slot_basedir();
die "not a directory: '$slot_basedir'\n" if not -d $slot_basedir;
die "directory not readable: '$slot_basedir'\n" if not -r $slot_basedir;
die "directory not writeable: '$slot_basedir'\n" if not -w $slot_basedir;
die "directory not executable: '$slot_basedir'\n" if not -x $slot_basedir;
die "directory not owned by cyrus: '$slot_basedir'\n" if not -o $slot_basedir;

# run command
my $g_current_slot = $slot;
my $force = $command =~ m/^force-/;

eval {
    $CMD_REFS{$command}->($command, $slot, $force);
};

if ($@) {
    print STDERR "error: $command slot $slot: $@\n";
    exit 1;
}

exit 0;

#############################################################

sub usage {
    my ($code) = @_;
    $code = $code || 1;

    print STDERR << "JHLBGK";
usage: $0 slot command

JHLBGK

    return $code;
}

sub become_cyrus {
    my ($zero, @args) = @_;

    my $cyrus = 'cyrus';

    my (undef, undef, $pw_uid, $pw_gid) = getpwnam $cyrus
        or die "no user named '$cyrus'\n";

    my $uid = POSIX::getuid();

    return if ($uid == $pw_uid); # already cyrus user

    if ($uid == 0) {
        POSIX::setgid($pw_gid)
            or die "cannot setgid to group $pw_gid: $!";
        POSIX::setuid($pw_uid)
            or die "cannot setuid to group $pw_uid: $!";
    }
    else {
        my @cmd = ( 'sudo', '-u', $cyrus, $zero, @args );
        exec {'sudo'} @cmd;
        die "sudo -u $cyrus failed: $?";
    }
}

sub install_defaults_cb {
    my $slot_defaults = Slot::slot_defaults();

    # skip the entry for the slot_defaults directory itself
    return if $File::Find::name eq $slot_defaults;

    my $slot_dir = Slot::slot_dir($g_current_slot);

    if (-d $File::Find::name) {
        my $dir = substr $File::Find::name, 1 + length $slot_defaults;
        $dir = "$slot_dir/$dir";

        if (not -d $dir and not mkdir $dir, 0770) {
            die "$dir: $!";
        }
    }
    else {
        my $file = substr $File::Find::name, 1 + length $slot_defaults;
        $file = "$slot_dir/$file";

        open my $in, '<', $File::Find::name or die "$File::Find::name: $!";
        open my $out, '>', $file or die "$file: $!";

        while (<$in>) {
            s{$slot_defaults/}{$slot_dir/}g;
            print $out $_;
        }

        close $out;
        close $in;
    }
}

sub newer_file {
    my @files = @_;

    my $newest_mtime = 0;
    my $newest_file;

    foreach my $file (@files) {
        next if not -e $file;

        my $mtime = (stat($file))[9];

        if ($mtime > $newest_mtime) {
            $newest_mtime = $mtime;
            $newest_file = $file;
        }
    }

    return $newest_file;
}

sub require_slot {
    my ($slot) = @_;

    # check that the slot exists
    if (not -d Slot::slot_dir($slot)) {
        die "slot not initialised\n";
    }
}

sub require_slot_config {
    my ($slot) = @_;

    # check that source dir is configured for the correct slot
    if (newer_file(".slot", "Makefile", "configure") ne ".slot") {
        # missing or stale .slot file
        die "not configured for this slot\n";
    }

    my $dot_slot = do {
        local $/ = undef;
        open my $f, '<', '.slot' or die ".slot: $!";
        <$f>;
    };
    chomp $dot_slot;

    if ($dot_slot ne $slot) {
        # wrong .slot file
        die "configured for wrong slot ($dot_slot)\n";
    }
}

############################################

sub cmd_init {
    my ($command, $slot, $force) = @_;

    my $slot_defaults = Slot::slot_defaults();
    my $slot_dir = Slot::slot_dir($slot);

    if (-d $slot_dir) {
        if (not $force) {
            die "already initialised\n";
        }
    }
    elsif (not mkdir $slot_dir, 0770) {
        die "mkdir failed: $!";
    }

    if (-d $slot_defaults) {
        find(\&install_defaults_cb, $slot_defaults);
    }
}

sub cmd_configure {
    my ($command, $slot, $force) = @_;

    # sanity check
    if (getcwd !~ m/cyrus-imapd$/
        or not -e 'configure.ac'
        or not -e 'Makefile.am'
    ) {
        die "current directory doesn't look like a cyrus source tree\n";
    }

    # if configure doesn't exist or is older than configure.ac, autoreconf
    if ("configure.ac" eq newer_file "configure", "configure.ac") {
        print STDERR "configure doesn't exist or is stale, rebuilding\n";
        run qw( autoreconf -i -s );
    }

    # run configure
    my $cflags = '-g -O0 -Wall -Wextra -Werror';
    my @configure_args = qw(
        --enable-silent-rules
        --enable-http
        --enable-unit-tests
        --enable-replication
        --with-openssl=yes
        --enable-nntp
        --enable-murder
        --enable-idled
    );

    my $slot_dir = Slot::slot_dir($slot);

    run "./configure",
        "CFLAGS=$cflags",
        "--prefix=$slot_dir/usr/cyrus",
        "--sysconfdir=$slot_dir/etc",
        @configure_args;

    # update .slot file
    open my $f, '>', '.slot';
    print $f "$slot\n";
    close $f;
}

sub cmd_build {
    my ($command, $slot, $force) = @_;

    require_slot_config($slot);
    run qw( make lex-fix );
    run qw( make -j 16 );
}

sub cmd_check {
    my ($command, $slot, $force) = @_;

    require_slot_config($slot);
    run qw( make check );
}

sub cmd_install {
    my ($command, $slot, $force) = @_;

    require_slot($slot);
    require_slot_config($slot);
    run qw( make install );
}

sub cmd_fullbuild {
    my ($command, $slot, $force) = @_;

    # make configure.ac look newer than anything else
    utime(undef, undef, "configure.ac");

    cmd_configure($command, $slot, $force);
    cmd_build($command, $slot, $force);
    cmd_check($command, $slot, $force);
}

sub cmd_stop {
    my ($command, $slot, $force) = @_;

    require_slot($slot);

    my $pidfile = Slot::slot_pidfile($slot);

    if (not -e $pidfile) {
        die "not running\n";
    }

    my $pid = do {
        local $/ = undef;
        open my $fh, '<', $pidfile or die "$pidfile: $!";
        <$fh>;
    };

    chomp $pid;

    die "invalid pid file: $pidfile\n" if not $pid or $pid < 0;

    print STDERR "slot $slot: trying nice shutdown...\n";

    kill 'QUIT', $pid;
    foreach my $sec (0..10) {
        if (kill 0, $pid) {
            print STDERR "slot $slot: still alive after $sec seconds...\n";
            sleep 1;
        }
        else {
            last;
        }
    }
    if (kill 0, $pid) {
        print STDERR "slot $slot: killing hard...\n";
        kill 'TERM', $pid;
    }

    if (kill 0, $pid) {
        die "unable to kill $pid even with sigterm??";
    }

    print "slot $slot stopped\n";

    unlink $pidfile or die "unlink $pidfile: $!";
}
